{"version":3,"sources":["webpack:///./src/sass/admin/_base.scss","webpack:///./node_modules/aurora-utilities/sass/utilities/_functions.scss","webpack:///./src/sass/_config.scss","webpack:///./src/sass/base/_wp-classes.scss","webpack:///./node_modules/aurora-utilities/sass/utilities/mixins/_utilities.scss"],"names":[],"mappings":"AAAA;;;EAOG,oBCwDwC,EDvDxC;;AARH;;;;EAcG,YEES;EFDT,kKEyDsD;EFxDtD,oCAAmC;EACnC,iBE6EmB;EF5EnB,iBEuEkB;EFtElB,sBAAqB,EACrB;;AApBH;EAuBG,iBCwCwC,EDvCxC;;AAxBH;EA2BG,gBAAe,EACf;;AA5BH;;;;;;EAoCG,kGEqCyG,EFpCzG;;AArCH;EAwCG,eEnCkB;EFoClB,2CAAkC;EAAlC,mCAAkC,EASlC;EAlDH;IA4CI,eEvCiB,EFwCjB;EA7CJ;IAgDI,eE1CiB,EF2CjB;;AGjDJ;EACC,gBAAe,EAMf;EAJA;IACC,oBDsHc;ICrHd,mBDoHc,ECnHd;;AAGF;EACC,UAAS,EACT;;AAED;EACC,eAAc;EACd,eAAc,EACd;;AAED;EACC,YAAW;EACX,mBDsGe,ECrGf;;AAED;EACC,aAAY;EACZ,kBDiGe,EChGf;;AAED;ECWE,UAAS;EACT,mBAAkB;EAClB,oBAAmB;EACnB,mBAAkB;EAClB,WAAU;EACV,aAAY,EDbb;;AAED;EACC,YAAW,EACX;;AAKA;EACC,eDpCmB,EC8CnB;EAXD;;;;;;IASE,eD5CkB,EC6ClB;;AAGF;EACC,0BDjDmB,ECkDnB;;AAfD;EACC,eDnCmB,EC6CnB;EAXD;;;;;;IASE,eD3CkB,EC4ClB;;AAGF;EACC,0BDhDmB,ECiDnB;;AAfD;EACC,YDlCU,EC4CV;EAXD;;;;;;IASE,YD1CS,EC2CT;;AAGF;EACC,uBD/CU,ECgDV;;AAfD;EACC,eD5Ba,ECsCb;EAXD;;;;;;IASE,eDpCY,ECqCZ;;AAGF;EACC,0BDzCa,EC0Cb;;AAfD;EACC,eDjCkB,EC2ClB;EAXD;;;;;;IASE,eDzCiB,EC0CjB;;AAGF;EACC,0BD9CkB,EC+ClB","file":"admin.css","sourcesContent":["body {\n\n\t&.gutenberg-editor-page {\n\n\t\t.editor-post-title__block,\n\t\t.editor-default-block-appender,\n\t\t.editor-block-list__block {\n\t\t\tmax-width: $page-content-width;\n\t\t}\n\n\t\t.editor-post-title__block,\n\t\t.editor-default-block-appender,\n\t\t.editor-block-list__block,\n\t\tp {\n\t\t\tcolor: $text-default-dark;\n\t\t\tfont-family: $base-font-family;\n\t\t\t-webkit-font-smoothing: antialiased;\n\t\t\tfont-weight: $base-font-weight;\n\t\t\tline-height: unitless-calc($base-line-height, $base-font-size);\n\t\t\tword-wrap: break-word;\n\t\t}\n\n\t\t.editor-block-list__block[data-align=\"wide\"] {\n\t\t\tmax-width: $content-width;\n\t\t}\n\n\t\t.editor-block-list__block[data-align=\"full\"] {\n\t\t\tmax-width: none;\n\t\t}\n\n\t\tcode,\n\t\tkbd,\n\t\tpre,\n\t\tsamp,\n\t\ttt,\n\t\tvar {\n\t\t\tfont-family: $font-family-monospace;\n\t\t}\n\n\t\ta {\n\t\t\tcolor: $link;\n\t\t\ttransition: color 0.3s ease-in-out;\n\n\t\t\t&:visited {\n\t\t\t\tcolor: $link-visited;\n\t\t\t}\n\n\t\t\t&:hover {\n\t\t\t\tcolor: $link-hover;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/sass/admin/_base.scss","// FUNCTIONS\n\n/// Removes unit from length.\n///\n/// @param  {Number} $number - Number from which to remove unit.\n/// @return {Number}         - Unitless number.\n///\n/// @link   https://css-tricks.com/snippets/sass/strip-unit-function/\n@function strip-unit($number) {\n  @if type-of($number) == 'number' and not unitless($number) {\n    @return $number/($number * 0 + 1);\n  }\n\n  @return $number;\n}\n\n/// Get a unitless number from two numbers. Helpful for calculation line height.\n///\n/// @param  {Number} $number                 - Numerator for calculation.\n/// @param  {Number} $base [$base-font-size] - Denominator for calculation.\n/// @return {Number}                         - Number without units.\n@function unitless-calc($number, $base: $base-font-size) {\n  @if not unitless($number) {\n    $number: strip-unit($number);\n  }\n\n  @if not unitless($base) {\n    $base: strip-unit($base);\n  }\n\n  @return $number / $base;\n}\n\n/// Convert a pixel value to ems. Pass `$base` for increased accuracy.\n///\n/// @param  {Number} $pxval                  - The pixel value to convert.\n/// @param  {Number} $base [$base-font-size] - The pixel equivalent of ancestor font size.\n/// @return {Number}                         - The `em` font size.\n///\n/// @link   https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/functions/_px-to-em.scss\n@function em($pxval, $base: $base-font-size) {\n  @if not unitless($pxval) {\n    $pxval: strip-unit($pxval);\n  }\n\n  @if not unitless($base) {\n    $base: strip-unit($base);\n  }\n\n  @return ($pxval / $base) * 1em;\n}\n\n/// Convert a pixel value to rems.\n///\n/// @param  {Number} $pxval - The pixel value to convert.\n/// @return {Number}        - The `rem` font size.\n///\n/// @link   https://github.com/thoughtbot/bourbon/blob/v4-stable/app/assets/stylesheets/functions/_px-to-rem.scss\n@function rem($pxval) {\n  @if not unitless($pxval) {\n    $pxval: strip-unit($pxval);\n  }\n\n  @return ($pxval / $base-font-size) * 1rem;\n}\n\n/// Tint a color (add white) by a specified amount.\n///\n/// @param  {Color}  $color  - The color to tint.\n/// @param  {Number} $amount - The amount of white to add.\n/// @return {Color}          - The tinted color.\n@function tint($color, $amount) {\n  @return mix(#fff, $color, $amount);\n}\n\n/// Tone a color (add gray) by a specified amount.\n///\n/// @param  {Color}  $color          - The color to tone.\n/// @param  {Number} $amount         - The amount of gray to add.\n/// @param  {Color}  $gray [#808080] - The gray to mix.\n/// @return {Color}                  - The toned color.\n/// @todo Replace hardcoded gray with global / default specified in `_config.scss`.\n@function tone($color, $amount, $gray: #808080) {\n  @return mix($gray, $color, $amount);\n}\n\n/// Shade a color (add black) by a specified amount.\n///\n/// @param  {Color}  $color  - The color to shade.\n/// @param  {Number} $amount - The amount of black to add.\n/// @return {Color}          - The shaded color.\n@function shade($color, $amount) {\n  @return mix(#000, $color, $amount);\n}\n\n/// Get a z-index from a z-index map.\n///\n/// @param  {String} $index        - The index to get.\n/// @param  {Map}    $z [$z-index] - The map containing z-indeces.\n/// @return {Number}               - The corresponding z-index value.\n@function z($index, $z: $z-index) {\n  @if not map-get($z, $index) {\n    @warn 'No index `#{inspect($index)}` found!';\n  }\n  @return map-get($z, $index);\n}\n\n/// Calculate the luminance of a given color.\n///\n/// @param  {Color}  $color - The color to check.\n/// @return {Number}        - The color's luminance.\n///\n/// @link   https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n@function luminance($color) {\n  $red: red($color) * 0.2126;\n  $green: green($color) * 0.7152;\n  $blue: blue($color) * 0.0722;\n\n  @return $red + $green + $blue;\n}\n\n/// Calculate the contrast between two colors.\n///\n/// @param  {Color}  $color1 - The first color to check.\n/// @param  {Color}  $color2 - The second color to check.\n/// @return {Number}         - The contrast ratio between the two colors.\n///\n/// @link   https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n@function calculate-contrast($color1, $color2) {\n  $color1: luminance($color1) + 0.05;\n  $color2: luminance($color2) + 0.05;\n\n  @return max($color1, $color2) / min($color1, $color2);\n}\n\n/// Chooses the color with the best contrast for the base.\n///\n/// @param  {Color} $base-color                  - The color against which to check.\n/// @param  {Color} $light [$text-default-light] - The light color against which to check.\n/// @param  {Color} $dark  [$text-default-dark]  - The dark color against which to check.\n/// @return {Color}                              - The color with the better contrast.\n///\n/// @link   https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n@function contrast($base-color, $light: $text-default-light, $dark: $text-default-dark) {\n  $contrast-light: calculate-contrast($base-color, $light);\n  $contrast-dark: calculate-contrast($base-color, $dark);\n\n  @if ($contrast-light > $contrast-dark) {\n    @return $light;\n  } @else {\n    @return $dark;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/aurora-utilities/sass/utilities/_functions.scss","// ====================================\n// COLORS\n// ====================================\n\n// Descriptive colors.\n$bay-of-many: #1f4483;\n$puerto-rico: #58b7a1;\n$white: #fff;\n$mine-shaft: #363a42;\n$white-smoke: #ebecee;\n\n// Secondary colors.\n$cinder: #26292e;\n$raven: #73767b;\n$gray-chateau: #a4a5a6;\n$concrete: #f1f2f3;\n$black: #000;\n\n// Utility colors.\n$apple: #54a236;\n$well-read: #b13134;\n$tacha: #dbc15b;\n\n// Main colors.\n$color-primary: $bay-of-many !default;\n$color-accent: $puerto-rico !default;\n$color-success: $apple !default;\n$color-danger: $well-read !default;\n$color-light-gray: $white-smoke !default;\n$color-dark-gray: $raven !default;\n$color-shadow: rgba($cinder, 0.15);\n\n/// The main colors used throughout the site. This map can be used to automatically add color classes.\n///\n/// @type Map\n$theme-colors: (\n\t\"primary\": $color-primary,\n\t\"accent\": $color-accent,\n\t\"success\": $color-success,\n\t\"danger\": $color-danger,\n\t\"light-gray\": $color-light-gray,\n\t\"dark-gray\": $color-dark-gray,\n\t\"shadow\": $color-shadow\n);\n\n/// The used within the content editor (editor-palette). This map can be used to automatically add color classes.\n///\n/// @type Map\n$editor-palette: (\n\t\"bay-of-many\": $bay-of-many,\n\t\"puerto-rico\": $puerto-rico,\n\t\"white\": $white,\n\t\"raven\": $raven,\n\t\"mine-shaft\": $mine-shaft\n);\n\n// Elements.\n$body-background: $white;\n\n$text-default-dark: $black;\n$text-default-light: $white-smoke;\n\n$link: $color-primary;\n$link-hover: $color-accent;\n$link-visited: $link;\n\n// ====================================\n// TYPOGRAPHY\n// ====================================\n\n// stylelint-disable value-keyword-case\n$font-family-sans-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif,\n\t\"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\" !default;\n$font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace !default;\n// stylelint-enable\n\n/// Set the `body` font family.\n///\n/// @type String\n$base-font-family: $font-family-sans-serif;\n\n/// Set the base (`root`) font size for the project. This should be unitless!\n///\n/// @type Number\n$base-font-size: 16 !default;\n\n/// Set the base line height for the project. This value should be unitless and represent the pixel equivalent.\n///\n/// @type Number\n$base-line-height: 24 !default;\n\n/// Set the base font weight for the project.\n///\n/// @type {Number|String}\n$base-font-weight: 400 !default;\n\n// ====================================\n// SIZES\n// ====================================\n\n/// Set the max width of the site.\n///\n/// @type Number\n$site-width: rem(1600);\n\n/// Set the width of the site's content.\n///\n/// @type Number\n$content-width: rem(1200);\n\n/// Set the width of the site's [optional] sidebar.\n///\n/// @type Number\n$sidebar-width: rem(300);\n\n/// Set the width of the page content.\n///\n/// @type Number\n$page-content-width: rem(660);\n\n// Spacing\n$sp-half: 0.5rem;\n$sp-single: 1rem;\n$sp-double: 2rem;\n$sp-triple: 3rem;\n\n// ====================================\n// BREAKPOINTS\n// ====================================\n\n/// Breakpoints - add more as needed.\n///\n/// @type Number\n/// @link https://medium.freecodecamp.com/the-100-correct-way-to-do-css-breakpoints-88d6a5ba1862#.or3duno2h\n$tablet-portrait: rem(600);\n$tablet-landscape: rem(900);\n$desktop: rem(1200);\n$desktop-xl: rem(1800);\n\n// ====================================\n// Z-INDEX\n// ====================================\n\n/// Keep your sanity while managing your z-indeces.\n///\n/// @type Map\n/// @link https://github.com/minamarkham/sassy-starter/blob/master/src/scss/utilities/_config.scss#L39\n$z-index: (\n\tmobile-menu-full-screen: -10,\n\tdefault: 1,\n\tmenu-screen: 2,\n\tmain-navigation: 3,\n\tmenu-toggle: 4,\n\tsub-menu: 5\n);\n\n// ====================================\n// Social Icons\n// ====================================\n$social-links: (\n\tbehance: \"behance-square\",\n\tblogger: \"blogger\",\n\tdribbble: \"dribbble-square\",\n\tfacebook: \"facebook-square\",\n\tflickr: \"flickr\",\n\tgithub: \"github-square\",\n\tgoogle: \"google-plus-square\",\n\thacker-news: \"hacker-news-square\",\n\tinstagram: \"instagram\",\n\tkickstarter: \"kickstarter\",\n\tlinkedin: \"linkedin\",\n\tpinterest: \"pinterest-square\",\n\treddit: \"reddit-square\",\n\tsnapchat: \"snapchat-square\",\n\ttwitter: \"twitter-square\",\n\tvimeo: \"vimeo-square\",\n\tyoutube: \"youtube-square\"\n);\n\n// ====================================\n// TRANSITIONS\n// ====================================\n$transition-transform: transform 0.3s ease-in-out;\n$transition-z-index: z-index 0.3s ease-in-out;\n$transition-opacity: opacity 0.3s ease-in-out;\n\n\n\n// WEBPACK FOOTER //\n// ./src/sass/_config.scss",".wp-caption {\n\tmax-width: 100%;\n\n\t&-text {\n\t\tmargin-bottom: $sp-single;\n\t\tmargin-top: $sp-half;\n\t}\n}\n\n.alignnone {\n\tmargin: 0;\n}\n\n.aligncenter {\n\tdisplay: block;\n\tmargin: 0 auto;\n}\n\n.alignleft {\n\tfloat: left;\n\tmargin-right: $sp-single;\n}\n\n.alignright {\n\tfloat: right;\n\tmargin-left: $sp-single;\n}\n\n.alignfull {\n\n\t@include full-width;\n}\n\n.alignwide {\n\twidth: 100%;\n}\n\n// Editor color palette classes.\n@each $name, $color in $editor-palette {\n\n\t.has-#{$name}-color {\n\t\tcolor: $color;\n\n\t\th2,\n\t\th3,\n\t\th4,\n\t\th5,\n\t\th6,\n\t\ta {\n\t\t\tcolor: $color;\n\t\t}\n\t}\n\n\t.has-#{$name}-background-color {\n\t\tbackground-color: $color;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/sass/base/_wp-classes.scss","// UTILITIES\n\n/// Always clear floats.\n///\n/// @example - scss Usage\n///  @include clearfix;\n///\n/// @link http://nicolasgallagher.com/micro-clearfix-hack/\n@mixin clearfix {\n  *zoom: 1;\n\n  &:after,\n  &:before {\n    content: ' ';\n    display: table;\n  }\n\n  &:after {\n    clear: both;\n  }\n}\n\n/// Removes list delimiters, margin, and padding from `ul` or `ol` elements.\n///\n/// @example - scss Usage\n///  @include list-reset\n@mixin list-reset {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/// Extend an element to the edge of the viewport when the parent has a fixed width.\n///\n/// @example - scss Usage\n///  @include full-width\n///\n/// @link https://css-tricks.com/full-width-containers-limited-width-parents/\n@mixin full-width {\n  left: 50%;\n  margin-left: -50vw;\n  margin-right: -50vw;\n  position: relative;\n  right: 50%;\n  width: 100vw;\n}\n\n/// Visually hides text, but text is still available for screen readers. Text is not focusable.\n///\n/// @example - scss Usage\n///  @include screen-reader-text\n@mixin screen-reader-text {\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n/// Visually hides text, but it's still available for screen readers, and is still focusable.\n///\n/// @example - scss Usage\n///  @include screen-reader-text-focusable\n@mixin screen-reader-text-focusable {\n  &:focus {\n    border: auto;\n    clip: auto;\n    height: auto;\n    margin: 0;\n    overflow: visible;\n    position: static;\n    width: auto;\n  }\n}\n\n/// Centers a background image, and makes sure it covers its container.\n///\n/// @example - scss Usage\n///  @include image-as-background\n@mixin image-as-background {\n  background-position: center;\n  background-size: cover;\n}\n\n/// Declare the element `height` and `width`.\n///\n/// @param {Number} $width           - The element width.\n/// @param {Number} $height [$width] - The element height.\n///\n/// @example - scss Usage\n///  .el {\n///    @include size(50px, 150px);\n///  }\n///\n/// @example - css Output\n///  .el {\n///    height: 150px;\n///    width: 50px;\n///  }\n///\n/// @example - scss Usage\n///  .el {\n///    @include size(50px);\n///  }\n///\n/// @example - css Output\n///  .el {\n///    height: 50px;\n///    width: 50px;\n///  }\n@mixin size($width, $height) {\n  @if not $height {\n    $height: $width;\n  }\n\n  height: $height;\n  width: $width;\n}\n\n/// Set an aspect ratio on an element.\n///\n/// @param {Number} $width    - The width ratio, this value should be unitless.\n/// @param {Number} $height   - The height ratio, this value should be unitless.\n/// @param {Number} $el-width - The element width.\n///\n/// @example - scss Usage for 3:2 ratio\n///  .el {\n///    @include aspect-ratio(3, 2, 50%);\n///  }\n@mixin aspect-ratio($width, $height, $el-width) {\n  @include size($el-width, 0);\n\n  padding-top: $height / $width * $el-width;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/aurora-utilities/sass/utilities/mixins/_utilities.scss"],"sourceRoot":""}